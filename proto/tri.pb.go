// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.3
// source: tri.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word   string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Open   bool   `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	SkinId string `protobuf:"bytes,3,opt,name=skinId,proto3" json:"skinId,omitempty"`
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{0}
}

func (x *Word) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Word) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Word) GetSkinId() string {
	if x != nil {
		return x.SkinId
	}
	return ""
}

type CurrentPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PlayerIndex int32  `protobuf:"varint,2,opt,name=playerIndex,proto3" json:"playerIndex,omitempty"`
}

func (x *CurrentPlayer) Reset() {
	*x = CurrentPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentPlayer) ProtoMessage() {}

func (x *CurrentPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentPlayer.ProtoReflect.Descriptor instead.
func (*CurrentPlayer) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentPlayer) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CurrentPlayer) GetPlayerIndex() int32 {
	if x != nil {
		return x.PlayerIndex
	}
	return 0
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Score string  `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Words []*Word `protobuf:"bytes,3,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{2}
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Player) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

type CreateGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateGameRequest) Reset() {
	*x = CreateGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGameRequest) ProtoMessage() {}

func (x *CreateGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGameRequest.ProtoReflect.Descriptor instead.
func (*CreateGameRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{3}
}

type CreateGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	CreatorToken string `protobuf:"bytes,2,opt,name=creatorToken,proto3" json:"creatorToken,omitempty"`
}

func (x *CreateGameReply) Reset() {
	*x = CreateGameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGameReply) ProtoMessage() {}

func (x *CreateGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGameReply.ProtoReflect.Descriptor instead.
func (*CreateGameReply) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGameReply) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateGameReply) GetCreatorToken() string {
	if x != nil {
		return x.CreatorToken
	}
	return ""
}

type JoinGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	PlayerName  string `protobuf:"bytes,2,opt,name=playerName,proto3" json:"playerName,omitempty"`
	PlayerToken string `protobuf:"bytes,3,opt,name=playerToken,proto3" json:"playerToken,omitempty"`
}

func (x *JoinGameRequest) Reset() {
	*x = JoinGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameRequest) ProtoMessage() {}

func (x *JoinGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameRequest.ProtoReflect.Descriptor instead.
func (*JoinGameRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{5}
}

func (x *JoinGameRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinGameRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *JoinGameRequest) GetPlayerToken() string {
	if x != nil {
		return x.PlayerToken
	}
	return ""
}

type GameSessionStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me              *CurrentPlayer `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Players         []*Player      `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Words           []*Word        `protobuf:"bytes,3,rep,name=words,proto3" json:"words,omitempty"`
	NumberOfColumns int32          `protobuf:"varint,4,opt,name=numberOfColumns,proto3" json:"numberOfColumns,omitempty"`
}

func (x *GameSessionStream) Reset() {
	*x = GameSessionStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSessionStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSessionStream) ProtoMessage() {}

func (x *GameSessionStream) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSessionStream.ProtoReflect.Descriptor instead.
func (*GameSessionStream) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{6}
}

func (x *GameSessionStream) GetMe() *CurrentPlayer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *GameSessionStream) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameSessionStream) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *GameSessionStream) GetNumberOfColumns() int32 {
	if x != nil {
		return x.NumberOfColumns
	}
	return 0
}

type TurnGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	PlayerToken string `protobuf:"bytes,2,opt,name=playerToken,proto3" json:"playerToken,omitempty"`
	Position    int32  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *TurnGameRequest) Reset() {
	*x = TurnGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnGameRequest) ProtoMessage() {}

func (x *TurnGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnGameRequest.ProtoReflect.Descriptor instead.
func (*TurnGameRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{7}
}

func (x *TurnGameRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TurnGameRequest) GetPlayerToken() string {
	if x != nil {
		return x.PlayerToken
	}
	return ""
}

func (x *TurnGameRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type StartGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	PlayerToken     string `protobuf:"bytes,2,opt,name=playerToken,proto3" json:"playerToken,omitempty"`
	NumberOfRows    int32  `protobuf:"varint,3,opt,name=numberOfRows,proto3" json:"numberOfRows,omitempty"`
	NumberOfColumns int32  `protobuf:"varint,4,opt,name=numberOfColumns,proto3" json:"numberOfColumns,omitempty"`
}

func (x *StartGameRequest) Reset() {
	*x = StartGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGameRequest) ProtoMessage() {}

func (x *StartGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGameRequest.ProtoReflect.Descriptor instead.
func (*StartGameRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{8}
}

func (x *StartGameRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StartGameRequest) GetPlayerToken() string {
	if x != nil {
		return x.PlayerToken
	}
	return ""
}

func (x *StartGameRequest) GetNumberOfRows() int32 {
	if x != nil {
		return x.NumberOfRows
	}
	return 0
}

func (x *StartGameRequest) GetNumberOfColumns() int32 {
	if x != nil {
		return x.NumberOfColumns
	}
	return 0
}

var File_tri_proto protoreflect.FileDescriptor

var file_tri_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4f, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x57,
	0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x53, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a,
	0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x1b, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x54, 0x75, 0x72, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x32, 0xd7, 0x01, 0x0a, 0x07, 0x54, 0x52,
	0x49, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x10, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x10, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x7a, 0x61, 0x6b, 0x68, 0x2e, 0x69, 0x6f, 0x2f, 0x74,
	0x72, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tri_proto_rawDescOnce sync.Once
	file_tri_proto_rawDescData = file_tri_proto_rawDesc
)

func file_tri_proto_rawDescGZIP() []byte {
	file_tri_proto_rawDescOnce.Do(func() {
		file_tri_proto_rawDescData = protoimpl.X.CompressGZIP(file_tri_proto_rawDescData)
	})
	return file_tri_proto_rawDescData
}

var file_tri_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tri_proto_goTypes = []interface{}{
	(*Word)(nil),              // 0: Word
	(*CurrentPlayer)(nil),     // 1: CurrentPlayer
	(*Player)(nil),            // 2: Player
	(*CreateGameRequest)(nil), // 3: CreateGameRequest
	(*CreateGameReply)(nil),   // 4: CreateGameReply
	(*JoinGameRequest)(nil),   // 5: JoinGameRequest
	(*GameSessionStream)(nil), // 6: GameSessionStream
	(*TurnGameRequest)(nil),   // 7: TurnGameRequest
	(*StartGameRequest)(nil),  // 8: StartGameRequest
	(*empty.Empty)(nil),       // 9: google.protobuf.Empty
}
var file_tri_proto_depIdxs = []int32{
	0, // 0: Player.words:type_name -> Word
	1, // 1: GameSessionStream.me:type_name -> CurrentPlayer
	2, // 2: GameSessionStream.players:type_name -> Player
	0, // 3: GameSessionStream.words:type_name -> Word
	3, // 4: TRIGame.Create:input_type -> CreateGameRequest
	5, // 5: TRIGame.Join:input_type -> JoinGameRequest
	8, // 6: TRIGame.Start:input_type -> StartGameRequest
	7, // 7: TRIGame.Turn:input_type -> TurnGameRequest
	4, // 8: TRIGame.Create:output_type -> CreateGameReply
	6, // 9: TRIGame.Join:output_type -> GameSessionStream
	9, // 10: TRIGame.Start:output_type -> google.protobuf.Empty
	9, // 11: TRIGame.Turn:output_type -> google.protobuf.Empty
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tri_proto_init() }
func file_tri_proto_init() {
	if File_tri_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tri_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSessionStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tri_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tri_proto_goTypes,
		DependencyIndexes: file_tri_proto_depIdxs,
		MessageInfos:      file_tri_proto_msgTypes,
	}.Build()
	File_tri_proto = out.File
	file_tri_proto_rawDesc = nil
	file_tri_proto_goTypes = nil
	file_tri_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TRIGameClient is the client API for TRIGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TRIGameClient interface {
	Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameReply, error)
	Join(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (TRIGame_JoinClient, error)
	Start(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Turn(ctx context.Context, in *TurnGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type tRIGameClient struct {
	cc grpc.ClientConnInterface
}

func NewTRIGameClient(cc grpc.ClientConnInterface) TRIGameClient {
	return &tRIGameClient{cc}
}

func (c *tRIGameClient) Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameReply, error) {
	out := new(CreateGameReply)
	err := c.cc.Invoke(ctx, "/TRIGame/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRIGameClient) Join(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (TRIGame_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TRIGame_serviceDesc.Streams[0], "/TRIGame/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &tRIGameJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TRIGame_JoinClient interface {
	Recv() (*GameSessionStream, error)
	grpc.ClientStream
}

type tRIGameJoinClient struct {
	grpc.ClientStream
}

func (x *tRIGameJoinClient) Recv() (*GameSessionStream, error) {
	m := new(GameSessionStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tRIGameClient) Start(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TRIGame/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRIGameClient) Turn(ctx context.Context, in *TurnGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TRIGame/Turn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRIGameServer is the server API for TRIGame service.
type TRIGameServer interface {
	Create(context.Context, *CreateGameRequest) (*CreateGameReply, error)
	Join(*JoinGameRequest, TRIGame_JoinServer) error
	Start(context.Context, *StartGameRequest) (*empty.Empty, error)
	Turn(context.Context, *TurnGameRequest) (*empty.Empty, error)
}

// UnimplementedTRIGameServer can be embedded to have forward compatible implementations.
type UnimplementedTRIGameServer struct {
}

func (*UnimplementedTRIGameServer) Create(context.Context, *CreateGameRequest) (*CreateGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTRIGameServer) Join(*JoinGameRequest, TRIGame_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedTRIGameServer) Start(context.Context, *StartGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedTRIGameServer) Turn(context.Context, *TurnGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Turn not implemented")
}

func RegisterTRIGameServer(s *grpc.Server, srv TRIGameServer) {
	s.RegisterService(&_TRIGame_serviceDesc, srv)
}

func _TRIGame_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).Create(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRIGame_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TRIGameServer).Join(m, &tRIGameJoinServer{stream})
}

type TRIGame_JoinServer interface {
	Send(*GameSessionStream) error
	grpc.ServerStream
}

type tRIGameJoinServer struct {
	grpc.ServerStream
}

func (x *tRIGameJoinServer) Send(m *GameSessionStream) error {
	return x.ServerStream.SendMsg(m)
}

func _TRIGame_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).Start(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRIGame_Turn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).Turn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/Turn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).Turn(ctx, req.(*TurnGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TRIGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TRIGame",
	HandlerType: (*TRIGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TRIGame_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TRIGame_Start_Handler,
		},
		{
			MethodName: "Turn",
			Handler:    _TRIGame_Turn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _TRIGame_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tri.proto",
}
