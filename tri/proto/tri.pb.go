// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.3
// source: tri.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Cell_Type int32

const (
	Cell_REGULAR    Cell_Type = 0
	Cell_TEAM_OWNED Cell_Type = 1
	Cell_END_GAME   Cell_Type = 2
)

// Enum value maps for Cell_Type.
var (
	Cell_Type_name = map[int32]string{
		0: "REGULAR",
		1: "TEAM_OWNED",
		2: "END_GAME",
	}
	Cell_Type_value = map[string]int32{
		"REGULAR":    0,
		"TEAM_OWNED": 1,
		"END_GAME":   2,
	}
)

func (x Cell_Type) Enum() *Cell_Type {
	p := new(Cell_Type)
	*p = x
	return p
}

func (x Cell_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cell_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tri_proto_enumTypes[0].Descriptor()
}

func (Cell_Type) Type() protoreflect.EnumType {
	return &file_tri_proto_enumTypes[0]
}

func (x Cell_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cell_Type.Descriptor instead.
func (Cell_Type) EnumDescriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{2, 0}
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias   string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	TeamId  string `protobuf:"bytes,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Score   int32  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Captain bool   `protobuf:"varint,5,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{0}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Player) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *Player) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Player) GetCaptain() bool {
	if x != nil {
		return x.Captain
	}
	return false
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias          string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	RemainingCount int32  `protobuf:"varint,3,opt,name=remainingCount,proto3" json:"remainingCount,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{1}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Team) GetRemainingCount() int32 {
	if x != nil {
		return x.RemainingCount
	}
	return 0
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word        string    `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Open        bool      `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	Type        Cell_Type `protobuf:"varint,3,opt,name=type,proto3,enum=Cell_Type" json:"type,omitempty"`
	OwnerTeamId string    `protobuf:"bytes,4,opt,name=ownerTeamId,proto3" json:"ownerTeamId,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{2}
}

func (x *Cell) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Cell) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Cell) GetType() Cell_Type {
	if x != nil {
		return x.Type
	}
	return Cell_REGULAR
}

func (x *Cell) GetOwnerTeamId() string {
	if x != nil {
		return x.OwnerTeamId
	}
	return ""
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSessionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *CreateSessionReply) Reset() {
	*x = CreateSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionReply) ProtoMessage() {}

func (x *CreateSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionReply.ProtoReflect.Descriptor instead.
func (*CreateSessionReply) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionReply) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GameSessionStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        string    `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Players         []*Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Teams           []*Team   `protobuf:"bytes,3,rep,name=teams,proto3" json:"teams,omitempty"`
	Cells           []*Cell   `protobuf:"bytes,4,rep,name=cells,proto3" json:"cells,omitempty"`
	NumberOfColumns int32     `protobuf:"varint,5,opt,name=numberOfColumns,proto3" json:"numberOfColumns,omitempty"`
	Started         bool      `protobuf:"varint,6,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *GameSessionStream) Reset() {
	*x = GameSessionStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSessionStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSessionStream) ProtoMessage() {}

func (x *GameSessionStream) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSessionStream.ProtoReflect.Descriptor instead.
func (*GameSessionStream) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{5}
}

func (x *GameSessionStream) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *GameSessionStream) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameSessionStream) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *GameSessionStream) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *GameSessionStream) GetNumberOfColumns() int32 {
	if x != nil {
		return x.NumberOfColumns
	}
	return 0
}

func (x *GameSessionStream) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

type ObserveSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ObserveSessionRequest) Reset() {
	*x = ObserveSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveSessionRequest) ProtoMessage() {}

func (x *ObserveSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveSessionRequest.ProtoReflect.Descriptor instead.
func (*ObserveSessionRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{6}
}

func (x *ObserveSessionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ObserveSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SetAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	AnyId     string `protobuf:"bytes,3,opt,name=anyId,proto3" json:"anyId,omitempty"`
	Alias     string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *SetAliasRequest) Reset() {
	*x = SetAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasRequest) ProtoMessage() {}

func (x *SetAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAliasRequest.ProtoReflect.Descriptor instead.
func (*SetAliasRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{7}
}

func (x *SetAliasRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SetAliasRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SetAliasRequest) GetAnyId() string {
	if x != nil {
		return x.AnyId
	}
	return ""
}

func (x *SetAliasRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type SetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	TeamId    string `protobuf:"bytes,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Alias     string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Captain   bool   `protobuf:"varint,5,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (x *SetSettingsRequest) Reset() {
	*x = SetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSettingsRequest) ProtoMessage() {}

func (x *SetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{8}
}

func (x *SetSettingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SetSettingsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SetSettingsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *SetSettingsRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *SetSettingsRequest) GetCaptain() bool {
	if x != nil {
		return x.Captain
	}
	return false
}

type TurnGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Position  int32  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *TurnGameRequest) Reset() {
	*x = TurnGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnGameRequest) ProtoMessage() {}

func (x *TurnGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnGameRequest.ProtoReflect.Descriptor instead.
func (*TurnGameRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{9}
}

func (x *TurnGameRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TurnGameRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TurnGameRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type StartGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId       string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	NumberOfTeams   int32  `protobuf:"varint,3,opt,name=numberOfTeams,proto3" json:"numberOfTeams,omitempty"`
	NumberOfRows    int32  `protobuf:"varint,4,opt,name=numberOfRows,proto3" json:"numberOfRows,omitempty"`
	NumberOfColumns int32  `protobuf:"varint,5,opt,name=numberOfColumns,proto3" json:"numberOfColumns,omitempty"`
}

func (x *StartGameRequest) Reset() {
	*x = StartGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tri_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGameRequest) ProtoMessage() {}

func (x *StartGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tri_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGameRequest.ProtoReflect.Descriptor instead.
func (*StartGameRequest) Descriptor() ([]byte, []int) {
	return file_tri_proto_rawDescGZIP(), []int{10}
}

func (x *StartGameRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StartGameRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StartGameRequest) GetNumberOfTeams() int32 {
	if x != nil {
		return x.NumberOfTeams
	}
	return 0
}

func (x *StartGameRequest) GetNumberOfRows() int32 {
	if x != nil {
		return x.NumberOfRows
	}
	return 0
}

func (x *StartGameRequest) GetNumberOfColumns() int32 {
	if x != nil {
		return x.NumberOfColumns
	}
	return 0
}

var File_tri_proto protoreflect.FileDescriptor

var file_tri_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e,
	0x22, 0x54, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x2c, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd0,
	0x01, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x1b, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x22, 0x4b, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x61, 0x69, 0x6e, 0x22, 0x61, 0x0a, 0x0f, 0x54, 0x75, 0x72, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x32, 0xea, 0x02, 0x0a, 0x07, 0x54, 0x52, 0x49, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x10, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x13, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x13, 0x5a, 0x11, 0x7a, 0x61, 0x6b, 0x68, 0x2e, 0x69, 0x6f, 0x2f, 0x74, 0x72, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tri_proto_rawDescOnce sync.Once
	file_tri_proto_rawDescData = file_tri_proto_rawDesc
)

func file_tri_proto_rawDescGZIP() []byte {
	file_tri_proto_rawDescOnce.Do(func() {
		file_tri_proto_rawDescData = protoimpl.X.CompressGZIP(file_tri_proto_rawDescData)
	})
	return file_tri_proto_rawDescData
}

var file_tri_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tri_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tri_proto_goTypes = []interface{}{
	(Cell_Type)(0),                // 0: Cell.Type
	(*Player)(nil),                // 1: Player
	(*Team)(nil),                  // 2: Team
	(*Cell)(nil),                  // 3: Cell
	(*CreateSessionRequest)(nil),  // 4: CreateSessionRequest
	(*CreateSessionReply)(nil),    // 5: CreateSessionReply
	(*GameSessionStream)(nil),     // 6: GameSessionStream
	(*ObserveSessionRequest)(nil), // 7: ObserveSessionRequest
	(*SetAliasRequest)(nil),       // 8: SetAliasRequest
	(*SetSettingsRequest)(nil),    // 9: SetSettingsRequest
	(*TurnGameRequest)(nil),       // 10: TurnGameRequest
	(*StartGameRequest)(nil),      // 11: StartGameRequest
	(*empty.Empty)(nil),           // 12: google.protobuf.Empty
}
var file_tri_proto_depIdxs = []int32{
	0,  // 0: Cell.type:type_name -> Cell.Type
	1,  // 1: GameSessionStream.players:type_name -> Player
	2,  // 2: GameSessionStream.teams:type_name -> Team
	3,  // 3: GameSessionStream.cells:type_name -> Cell
	4,  // 4: TRIGame.CreateSession:input_type -> CreateSessionRequest
	7,  // 5: TRIGame.ObserveSession:input_type -> ObserveSessionRequest
	11, // 6: TRIGame.Start:input_type -> StartGameRequest
	10, // 7: TRIGame.Turn:input_type -> TurnGameRequest
	8,  // 8: TRIGame.SetAlias:input_type -> SetAliasRequest
	9,  // 9: TRIGame.SetSettings:input_type -> SetSettingsRequest
	5,  // 10: TRIGame.CreateSession:output_type -> CreateSessionReply
	6,  // 11: TRIGame.ObserveSession:output_type -> GameSessionStream
	12, // 12: TRIGame.Start:output_type -> google.protobuf.Empty
	12, // 13: TRIGame.Turn:output_type -> google.protobuf.Empty
	12, // 14: TRIGame.SetAlias:output_type -> google.protobuf.Empty
	12, // 15: TRIGame.SetSettings:output_type -> google.protobuf.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_tri_proto_init() }
func file_tri_proto_init() {
	if File_tri_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tri_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSessionStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tri_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tri_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tri_proto_goTypes,
		DependencyIndexes: file_tri_proto_depIdxs,
		EnumInfos:         file_tri_proto_enumTypes,
		MessageInfos:      file_tri_proto_msgTypes,
	}.Build()
	File_tri_proto = out.File
	file_tri_proto_rawDesc = nil
	file_tri_proto_goTypes = nil
	file_tri_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TRIGameClient is the client API for TRIGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TRIGameClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionReply, error)
	ObserveSession(ctx context.Context, in *ObserveSessionRequest, opts ...grpc.CallOption) (TRIGame_ObserveSessionClient, error)
	Start(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Turn(ctx context.Context, in *TurnGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetAlias(ctx context.Context, in *SetAliasRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetSettings(ctx context.Context, in *SetSettingsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type tRIGameClient struct {
	cc grpc.ClientConnInterface
}

func NewTRIGameClient(cc grpc.ClientConnInterface) TRIGameClient {
	return &tRIGameClient{cc}
}

func (c *tRIGameClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionReply, error) {
	out := new(CreateSessionReply)
	err := c.cc.Invoke(ctx, "/TRIGame/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRIGameClient) ObserveSession(ctx context.Context, in *ObserveSessionRequest, opts ...grpc.CallOption) (TRIGame_ObserveSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TRIGame_serviceDesc.Streams[0], "/TRIGame/ObserveSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &tRIGameObserveSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TRIGame_ObserveSessionClient interface {
	Recv() (*GameSessionStream, error)
	grpc.ClientStream
}

type tRIGameObserveSessionClient struct {
	grpc.ClientStream
}

func (x *tRIGameObserveSessionClient) Recv() (*GameSessionStream, error) {
	m := new(GameSessionStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tRIGameClient) Start(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TRIGame/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRIGameClient) Turn(ctx context.Context, in *TurnGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TRIGame/Turn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRIGameClient) SetAlias(ctx context.Context, in *SetAliasRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TRIGame/SetAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRIGameClient) SetSettings(ctx context.Context, in *SetSettingsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TRIGame/SetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRIGameServer is the server API for TRIGame service.
type TRIGameServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionReply, error)
	ObserveSession(*ObserveSessionRequest, TRIGame_ObserveSessionServer) error
	Start(context.Context, *StartGameRequest) (*empty.Empty, error)
	Turn(context.Context, *TurnGameRequest) (*empty.Empty, error)
	SetAlias(context.Context, *SetAliasRequest) (*empty.Empty, error)
	SetSettings(context.Context, *SetSettingsRequest) (*empty.Empty, error)
}

// UnimplementedTRIGameServer can be embedded to have forward compatible implementations.
type UnimplementedTRIGameServer struct {
}

func (*UnimplementedTRIGameServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedTRIGameServer) ObserveSession(*ObserveSessionRequest, TRIGame_ObserveSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveSession not implemented")
}
func (*UnimplementedTRIGameServer) Start(context.Context, *StartGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedTRIGameServer) Turn(context.Context, *TurnGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Turn not implemented")
}
func (*UnimplementedTRIGameServer) SetAlias(context.Context, *SetAliasRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlias not implemented")
}
func (*UnimplementedTRIGameServer) SetSettings(context.Context, *SetSettingsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettings not implemented")
}

func RegisterTRIGameServer(s *grpc.Server, srv TRIGameServer) {
	s.RegisterService(&_TRIGame_serviceDesc, srv)
}

func _TRIGame_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRIGame_ObserveSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TRIGameServer).ObserveSession(m, &tRIGameObserveSessionServer{stream})
}

type TRIGame_ObserveSessionServer interface {
	Send(*GameSessionStream) error
	grpc.ServerStream
}

type tRIGameObserveSessionServer struct {
	grpc.ServerStream
}

func (x *tRIGameObserveSessionServer) Send(m *GameSessionStream) error {
	return x.ServerStream.SendMsg(m)
}

func _TRIGame_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).Start(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRIGame_Turn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).Turn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/Turn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).Turn(ctx, req.(*TurnGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRIGame_SetAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).SetAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/SetAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).SetAlias(ctx, req.(*SetAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRIGame_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRIGameServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRIGame/SetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRIGameServer).SetSettings(ctx, req.(*SetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TRIGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TRIGame",
	HandlerType: (*TRIGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _TRIGame_CreateSession_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TRIGame_Start_Handler,
		},
		{
			MethodName: "Turn",
			Handler:    _TRIGame_Turn_Handler,
		},
		{
			MethodName: "SetAlias",
			Handler:    _TRIGame_SetAlias_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _TRIGame_SetSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveSession",
			Handler:       _TRIGame_ObserveSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tri.proto",
}
