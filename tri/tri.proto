syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "zakh.io/tri/proto";

message Player {
    string id = 1;
    string alias = 2;
    string teamId = 3;
    int32 score = 4;
    google.protobuf.BoolValue captain = 5;
}

message Team {
    string id = 1;
    string alias = 2;
    int32 remainingCount = 3;
}

message Cell {
    string word = 1;
    bool open = 2;
    enum Type {
        REGULAR = 0;
        TEAM_OWNED = 1;
        END_GAME = 2;
    }
    Type type = 3;
    string ownerTeamId = 4;
}

message CreateSessionRequest {
    string token = 1;
}

message CreateSessionReply {
    string sessionId = 1;
}

message GameSessionStream {
    string playerId = 1;
    repeated Player players = 2;
    repeated Team teams = 3;
    repeated Cell cells = 4;
    int32 numberOfColumns = 5;
    bool started = 6;
}

message ObserveSessionRequest {
    string token = 1;
    string sessionId = 2;
}

message SetAliasRequest {
    string token = 1;
    string sessionId = 2;
    string anyId = 3;
    string alias = 4;
}

message SetSettingsRequest {
    string token = 1;
    string sessionId = 2;
    string teamId = 3;
    string alias = 4;
    bool captain = 5;
}

message TurnGameRequest {
    string token = 1;
    string sessionId = 2;
    int32 position = 3;
}

message StartGameRequest {
    string token = 1;
    string sessionId = 2;
    int32 numberOfTeams = 3;
    int32 numberOfRows = 4;
    int32 numberOfColumns = 5;
    string language = 6;
    repeated string dictionary = 7;
}

service TRIGame {
    rpc CreateSession (CreateSessionRequest) returns (CreateSessionReply) {
    }
    rpc ObserveSession (ObserveSessionRequest) returns (stream GameSessionStream) {
    }

    rpc Start (StartGameRequest) returns (google.protobuf.Empty) {
    }
    rpc Turn (TurnGameRequest) returns (google.protobuf.Empty) {
    }
    rpc SetAlias (SetAliasRequest) returns (google.protobuf.Empty) {
    }
    rpc SetSettings (SetSettingsRequest) returns (google.protobuf.Empty) {
    }
}
